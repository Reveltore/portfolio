# -*- coding: utf-8 -*-
"""улучшение качества модели

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oNAEkn3ie5cvpbVDoHDtDbJkWXMdfsDn
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn import metrics
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import cross_validate
from sklearn.linear_model import LogisticRegressionCV
from sklearn.naive_bayes import BernoulliNB
from sklearn.ensemble import RandomForestClassifier

df = pd.read_csv('heart.csv')
df.head()

df.info()

def get_label(X,cols):
  X = X.copy()
  for each in cols:
    le = LabelEncoder()
    labels = le.fit_transform(X[each])
    X[each] = labels
  return X

categorials = df.select_dtypes('object').columns
X = get_label(df,categorials)
y = df['HeartDisease']
X = X.drop(columns = 'HeartDisease')
X.head()

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.2, random_state = 21)

lr = LogisticRegression()

lr.fit(X_train,y_train)

lr.score(X_train,y_train)

lr.score(X_test,y_test)

scorer = cross_validate(lr,X_test, y_test, cv=10, scoring=['accuracy','recall','precision','f1'])
scorer

k_range = list(range(1, 31))
print(k_range)

param_grid1 = dict(n_neighbors=k_range)
param_grid1 = {'n_neighbors':k_range}
print(param_grid1)

from sklearn.model_selection import GridSearchCV
param_grid = {'Cs':[0.1,0.2,0.3,0.5,0.7,1,1.5,2]
}
lr = LogisticRegressionCV()
grid = GridSearchCV(lr,param_grid,cv = 10, scoring = 'accuracy')

grid.fit(X_train,y_train)

print(grid.best_score_)
print(grid.best_estimator_)

scorer = cross_validate(grid,X_test, y_test, cv=10, scoring=['accuracy','recall','precision','f1'])
scorer

from sklearn.model_selection import RandomizedSearchCV
Rscv = RandomizedSearchCV(lr,param_grid,cv = 10, scoring = 'accuracy')
Rscv.fit(X_train,y_train)

print(Rscv.best_score_)
print(Rscv.best_estimator_)

import warnings
warnings.filterwarnings("ignore")

models =[
    {'name':'RFC', 'model': RandomForestClassifier(), 'params':{'n_estimators': [10,25,50,100,150,200], 'criterion':['gini', 'entropy'], 'max_depth': [3,5,7,9,11]}},
    {'name':'KNN', 'model': KNeighborsClassifier(),'params': {'n_neighbors':list(range(1,20)), 'weights': ['uniform', 'distance'], 'p':[1,2,3]}},
    {'name':'LR', 'model': LogisticRegression(), 'params': {'C':[0.1,0.2,0.3,0.4,0.5,0.7,1], 'penalty':['l1','l2']}},
    {'name':'DTC', 'model': DecisionTreeClassifier(), 'params': {'criterion':['gini', 'entropy'], 'max_depth':[3,5,6,7,9,11]}}
]

res =[]
for i in models:
  res.append((i['name'], RandomizedSearchCV(i['model'], i['params'], cv = 10).fit(X_train,y_train)))

scorer = cross_validate(models,X_test, y_test, cv=10, scoring=['accuracy','recall','precision','f1'])

for r in res:
  print(r[0],r[1].best_score_,r[1].best_params_,scorer)