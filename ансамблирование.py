# -*- coding: utf-8 -*-
"""Ансамблирование

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14lySvnqtLmx7Ke50Da0yDhCvW6hNSGwA
"""

import pandas as pd
import seaborn as sns
import numpy as np
from sklearn.model_selection import train_test_split
from matplotlib import pyplot as plt
from sklearn.model_selection import GridSearchCV
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import BaggingRegressor
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import StackingClassifier
from sklearn.linear_model import RidgeCV

df = pd.read_csv('heart.csv')
df.head()

df.info()

X_pre = df.drop(columns = 'HeartDisease')
y = df['HeartDisease']

categorials = X_pre.select_dtypes('object').columns
categorials

integer = X_pre.select_dtypes(['int', 'float']).columns.tolist()

def get_label(X, cols):
    X = X.copy()
    for each in cols:
        le = LabelEncoder()
        labels = le.fit_transform(X[each])
        X[each] = labels
    return X

X = get_label(X_pre,categorials)

X.head()

X_train,X_test, y_train,y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)

dummy_train = pd.get_dummies(X_train[categorials], columns = categorials)
dummy_test = pd.get_dummies(X_test[categorials], columns = categorials)

sns.pairplot(df, hue = 'HeartDisease')

from sklearn.metrics import classification_report
dtc = DecisionTreeClassifier(random_state =21)
dtc.fit(X_train,y_train)
dtc_y_pred = dtc.predict(X_test)
dtc.score(X_train,y_train)

dtc.score(X_test,y_test)

print(classification_report(y_test, dtc_y_pred))

from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier(random_state = 21)
rfc.fit(X_train,y_train)
rfc_y_pred = rfc.predict(X_test)

rfc.score(X_train,y_train)

rfc.score(X_test, y_test)

print(classification_report(y_test, rfc_y_pred))

imp = pd.Series(rfc.feature_importances_)
imp.index = pd.Series(X_train.columns)
imp = imp.sort_values(ascending = False)
imp

plt.title('5 важных признаков')
plt.xlabel('Признак')
plt.ylabel('Gini')
plt.bar(imp.head().index,imp.head())
plt.show()

bagging = BaggingRegressor(dtc,
                           n_estimators = 150,
                           max_samples = 0.5,
                           max_features = 0.5,
                           random_state = 21)

bagging.fit(X_train,y_train)

bagging_y_pred = bagging.predict(X_test)

bagging.score(X_train,y_train)

bagging.score(X_test,y_test)

print(classification_report(y_test, bagging_y_pred))

from sklearn.svm import SVC
svm = SVC(gamma = 'auto')
Classifier = StackingClassifier(
    [
        ('DecisionTreeClassifier', dtc),
        ('RandomForestClassifier', rfc),
        ('SVM', svm),
    ]
)

Classifier.fit(X_train,y_train)

Classifier.score(X_train, y_train)

Classifier.score(X_test, y_test)

class_pred_y = Classifier.predict(X_test)

print(classification_report(y_test, class_pred_y))