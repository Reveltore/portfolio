# -*- coding: utf-8 -*-
"""Итог.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hEkURqRuVMfcFNMqW6-CDKNKnsCm1yeQ
"""

import pandas as pd
import numpy as np

u_data = pd.read_csv('u.data.csv', sep = '\t', header = None)
u_data.columns = ['user_id', 'itemid' , 'rating' , 'timestamp']
u_data.head()

u_item = pd.read_csv('u.item.csv', sep = '|', header = None, encoding='latin-1')
u_item.columns = ['movieid ', 'movie title' , 'release_date' , 'video release date' ,
              'IMDb URL' , 'unknown' , 'Action' , 'Adventure' , 'Animation' ,
              'Childrens' , 'Comedy' , 'Crime' , 'Documentary' , 'Drama' , 'Fantasy' ,
              'Film-Noir' , 'Horror' , 'Musical' , 'Mystery' , 'Romance' , 'Sci-Fi' ,
              'Thriller' , 'War' , 'Western' ]

u_item.head()

u_item = u_item.drop('video release date', axis = 1)

u_item.head()

#405
u_data_405 = u_data.loc[u_data['user_id'] == 405]
u_data_405.head()

"""Год выхода
Жанры
Общее количество оценок
Суммарную оценку

"""

res = pd.merge(u_item, u_data, left_on=	'movieid ', right_on='itemid', how = 'right')
res.head()

res['count_rate'] = res.groupby('movieid ')[['user_id']].count()

res['sum_rate'] = res.groupby('movieid ')[['rating']].sum()

res.head()

#Сразу для спарка
res.to_csv('res.csv', index =False)

res = res.fillna(res.mean())

small_res = res[['movieid ', 'sum_rate', 'count_rate']]
small_res.drop_duplicates (subset=['movieid '], keep = 'first')
small_res.head()

small_res.info()

res405 = pd.merge(u_item, u_data_405, left_on=	'movieid ', right_on='itemid', how = 'right')
res405.head()

res_405 = pd.merge(small_res, res405, left_on=	'movieid ', right_on='movieid ', how = 'right' )
res_405.head()

res_405 = res_405.drop(columns=['itemid', 'unknown', 'IMDb URL'])
res_405.head()

res_405['release_date'] = pd.to_datetime(res_405['release_date'])
res_405['release_date'] = res_405['release_date'].dt.year

res_405.head()

res_405 = res_405.reset_index()

X = res_405[['release_date','sum_rate', 'count_rate', 'Action', 'Adventure', 'Animation', 'Childrens', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Fantasy', 'Film-Noir','Horror','Musical', 'Mystery', 'Romance', 'Sci-Fi', 'Thriller', 'War', 'Western']]
y = res_405[['rating']]

X['count_rate'] = X['count_rate'].fillna(X['count_rate'].mean())

X['sum_rate'] = X['sum_rate'].fillna(X['sum_rate'].mean())

X.info()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

lr=LinearRegression()
lr.fit(X_train,y_train)
lr.coef_

# Получаем предсказание
lr.predict(X_test)

from sklearn.metrics import mean_squared_error

mean_squared_error(y_test, lr.predict(X_test))

mean_squared_error(y_train, lr.predict(X_train))

!apt-get update

!apt-get install openjdk-8-jdk-headless -qq > /dev/null

!wget -q https://downloads.apache.org/spark/spark-3.2.3/spark-3.2.3-bin-hadoop2.7.tgz

!tar -xvf spark-3.2.3-bin-hadoop2.7.tgz

!pip install -q findspark

import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-8-openjdk-amd64"
os.environ["SPARK_HOME"] = "/content/spark-3.2.3-bin-hadoop2.7"

import findspark
findspark.init()
from pyspark.sql import SparkSession

spark = SparkSession.builder.master("local[*]").getOrCreate()

res =spark.read.csv('res.csv', sep = ',', inferSchema=True, header= True)
res.show()

"""Средствами спарка вывести среднюю оценку для каждого фильма"""

res_avg = res.groupby('movie title').avg('rating')
res_avg.show()

"""Посчитайте средствами спарка среднюю оценку для каждого жанра"""

Action_avg = res.where(res['Action'] == 1)
Action_avg = Action_avg.groupby('Action').avg('rating')
Action_avg.show()

Adventure_avg = res.where(res['Adventure'] == 1)
Adventure_avg = Adventure_avg.groupby('Adventure').avg('rating')
Adventure_avg.show()

Animation_avg = res.where(res['Animation'] == 1)
Animation_avg = Animation_avg.groupby('Animation').avg('rating')
Animation_avg.show()

Childrens_avg = res.where(res['Childrens'] == 1)
Childrens_avg = Childrens_avg.groupby('Childrens').avg('rating')
Childrens_avg.show()

Comedy_avg = res.where(res['Comedy'] == 1)
Comedy_avg = Comedy_avg.groupby('Comedy').avg('rating')
Comedy_avg.show()

Crime_avg = res.where(res['Crime'] == 1)
Crime_avg = Crime_avg.groupby('Crime').avg('rating')
Crime_avg.show()

Documentary_avg = res.where(res['Documentary'] == 1)
Documentary_avg = Documentary_avg.groupby('Documentary').avg('rating')
Documentary_avg.show()

Drama_avg = res.where(res['Drama'] == 1)
Drama_avg = Drama_avg.groupby('Drama').avg('rating')
Drama_avg.show()

Fantasy_avg = res.where(res['Fantasy'] == 1)
Fantasy_avg = Fantasy_avg.groupby('Fantasy').avg('rating')
Fantasy_avg.show()

Noir_avg = res.where(res['Film-Noir'] == 1)
Noir_avg = Noir_avg.groupby('Film-Noir').avg('rating')
Noir_avg.show()

Horror_avg = res.where(res['Horror'] == 1)
Horror_avg = Horror_avg.groupby('Horror').avg('rating')
Horror_avg.show()

Musical_avg = res.where(res['Musical'] == 1)
Musical_avg = Musical_avg.groupby('Musical').avg('rating')
Musical_avg.show()

Mystery_avg = res.where(res['Mystery'] == 1)
Mystery_avg = Mystery_avg.groupby('Mystery').avg('rating')
Mystery_avg.show()

Romance_avg = res.where(res['Romance'] == 1)
Romance_avg = Romance_avg.groupby('Romance').avg('rating')
Romance_avg.show()

Sci_Fi_avg = res.where(res['Sci-Fi'] == 1)
Sci_Fi_avg = Sci_Fi_avg.groupby('Sci-Fi').avg('rating')
Sci_Fi_avg.show()

Thriller_avg = res.where(res['Thriller'] == 1)
Thriller_avg = Thriller_avg.groupby('Thriller').avg('rating')
Thriller_avg.show()

War_avg = res.where(res['War'] == 1)
War_avg = War_avg.groupby('War').avg('rating')
War_avg.show()

Western_avg = res.where(res['Western'] == 1)
Western_avg = Western_avg.groupby('Western').avg('rating')
Western_avg.show()

"""В спарке получить 2 датафрейма с 5-ю самыми популярными и самыми непопулярными фильмами (по количеству оценок, либо по самой оценке - на Ваш выбор)"""

res.show()

res_top5 = res.sort(['count_rate'], ascending = False).show(5)

res_bot5 = res.sort(['count_rate'], ascending = True).show(5)