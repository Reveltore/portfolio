# -*- coding: utf-8 -*-
"""Счастье.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15prFLeFLW-5xIu3ZCMRa4gIdfQ5jwMY_
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
import plotly
import plotly.graph_objects as go

df_2015 = pd.read_csv('2015.csv')
df_2016 = pd.read_csv('2016.csv')
df_2017 = pd.read_csv('2017.csv')
df_2018 = pd.read_csv('2018.csv')
df_2019 = pd.read_csv('2019.csv')

#Убираем лишние символы в названиях столбцов
df_2015.columns = df_2015.columns.str.replace('[(,)]', '')
df_2016.columns = df_2016.columns.str.replace('[(,)]', '')
df_2017.columns = df_2017.columns.str.replace('.', ' ')

#Распределение по классам для наглядности для себя
def hap_score (score):
    if score < 5.0:
      return 'low'
    elif 5.0 < score < 7.0:
      return 'middle'
    else:
      return 'higth'

#Применяем функцию к дф
df_2015['Score_class']=df_2015['Happiness Score'].apply(hap_score)
df_2016['Score_class']=df_2016['Happiness Score'].apply(hap_score)
df_2017['Score_class']=df_2017['Happiness Score'].apply(hap_score)
df_2018['Score_class']=df_2018['Score'].apply(hap_score)
df_2019['Score_class']=df_2019['Score'].apply(hap_score)

df_2015.head()

df_2016 = df_2016.loc[:, ['Country' ,	'Happiness Rank' ,	'Happiness Score',	'Upper Confidence Interval',	'Lower Confidence Interval' ,	'Economy GDP per Capita',	'Family' ,	'Health Life Expectancy' ,	'Freedom',	'Generosity' ,	'Trust Government Corruption' ,	'Dystopia Residual' ,	'Score_class']]
df_2016.head()

df_2017 = df_2017.loc[:, ['Country' ,	'Happiness Rank' ,	'Happiness Score',	'Whisker high',	'Whisker low' ,	'Economy GDP per Capita',	'Family' ,	'Health Life Expectancy' ,	'Freedom',	'Generosity' ,	'Trust Government Corruption' ,	'Dystopia Residual' ,	'Score_class']]

df_2017.head()

df_2017.head()

df_2017.corr()['Happiness Score'][['Economy GDP per Capita' , 'Family', ' Health Life Expectancy' , 'Freedom', 'Generosity', 'Trust Government Corruption']].plot.bar()

df_2015.corr()['Happiness Score'][['Economy GDP per Capita', 'Family', 'Health Life Expectancy', 'Freedom', 'Trust Government Corruption', 'Generosity']].plot.bar()

df_2016.corr()['Happiness Score'][['Economy GDP per Capita', 'Family', 'Health Life Expectancy', 'Freedom', 'Trust Government Corruption', 'Generosity']].plot.bar()

df_2018.corr()['Score'][['GDP per capita', 'Social support', 'Healthy life expectancy', 'Freedom to make life choices', 'Perceptions of corruption', 'Generosity']].plot.bar()

df_2019.corr()['Score'][['GDP per capita', 'Social support', 'Healthy life expectancy', 'Freedom to make life choices',  'Perceptions of corruption', 'Generosity']].plot.bar()

# Построим регрессию с df_2019 как с самой свежей

col=['GDP per capita', 'Social support','Healthy life expectancy', 'Freedom to make life choices', 'Generosity','Perceptions of corruption']

plt.figure(figsize=(12,28*4))
gs = gridspec.GridSpec(28, 1)
for i, cn in enumerate(col):
  ax = plt.subplot(gs[i])
  sns.distplot(df_2019[cn], bins=50)
  sns.regplot(x=df_2019[cn],y='Score' ,data=df_2019)
  ax.set_xlabel('')
  ax.set_title('Regrassion of feature: ' + str(cn))
plt.show()